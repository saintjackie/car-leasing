package cz.muni.fi.car.leasing;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Jan Budinsky
 */

public class CustomerManagerImpl implements CustomerManager {

    private final DataSource dataSource;

    public CustomerManagerImpl(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Override
    public void create(Customer customer) throws DBException, IllegalArgumentException {
        validate(customer);
        if(customer.getId() != null) {
            throw new IllegalArgumentException("Customer ID is set while it should have been generated by DB");
        }
        try (Connection connection = dataSource.getConnection();
                PreparedStatement st = connection.prepareStatement(
                        "INSERT INTO customer (full_name,phone,birth_date,address) VALUES (?,?,?,?)",
                        Statement.RETURN_GENERATED_KEYS)) {

            st.setString(1, customer.getFullName());
            st.setString(2, customer.getPhoneNumber());
            st.setDate(3, Date.valueOf(customer.getBirthDate()));
            st.setString(4, customer.getAddress());

            int addedRows = st.executeUpdate();

            if (addedRows != 1) {
                throw new DBException("Internal Error: More rows (" + addedRows +
                        ") inserted when trying to insert following customer: " + customer);
            }

            ResultSet keyRS = st.getGeneratedKeys();
            customer.setId(getIdFromResultSetKeys(keyRS, customer));

        } catch (SQLException ex) {
            throw new DBException("Error when inserting following customer: " + customer, ex);
        }

    }

    @Override
    public void delete(Long id) throws DBException, IllegalArgumentException {
        if(id == null) {
            throw new IllegalArgumentException("Cannot delete customer with null ID given");
        }
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "DELETE FROM customer WHERE id = ?",
                     Statement.RETURN_GENERATED_KEYS)){

            st.setLong(1, id);

            int deletedRows = st.executeUpdate();

            if(deletedRows == 0) {
                throw new EntityNotFoundException("Failed to find / delete customer with ID: " + id);
            }
            if(deletedRows != 1) {
                throw new DBException("Multiple rows were affected while only 1 should have been deleted with ID: " +
                        id);
            }
        } catch (SQLException ex) {
            throw new DBException("Error when deleting customer with following ID: " + id, ex);
        }
    }

    @Override
    public void update(Customer customer) throws DBException, IllegalArgumentException {
        validate(customer);
        if(customer.getId() == null) {
            throw new IllegalArgumentException("Cannot update object with null ID");
        }
        try(Connection connection = dataSource.getConnection();
            PreparedStatement st = connection.prepareStatement("UPDATE customer SET full_name = ?, phone = ?, " +
                    "birth_date = ?, address = ? WHERE id = ?")) {

            st.setString(1, customer.getFullName());
            st.setString(2, customer.getPhoneNumber());
            st.setDate(3, Date.valueOf(customer.getBirthDate()));
            st.setString(4, customer.getAddress());
            st.setLong(5, customer.getId());

            int updatedRows = st.executeUpdate();

            if (updatedRows == 0) {
                throw new EntityNotFoundException("Customer with ID " + customer.getId() + "was not found in database");
            } else if (updatedRows != 1) {
                throw new DBException("More than 1 row updated: " + updatedRows);
            }
        } catch (SQLException ex) {
            throw new DBException("Error when updating following customer: " + customer.getId(), ex);
        }
    }

    @Override
    public Customer findById(Long id) throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer WHERE id = ?")) {

            st.setLong(1, id);

            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                Customer customer = fillCustomerFromResultSet(rs);

                if (rs.next()) {
                    throw new DBException( "Internal error: More customers with the same id (" + id + ") found." +
                            "First 2 customers: 1:\n" + customer + "2:\n" + fillCustomerFromResultSet(rs));
                }

                return customer;
            } else {
                return null;
            }

        } catch (SQLException ex) {
            throw new DBException("Error when retrieving customer with following id: " + id, ex);
        }
    }

    @Override
    public List<Customer> findByName(String name) throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer WHERE full_name = ?")) {

            st.setString(1, name);

            ResultSet rs = st.executeQuery();

            List<Customer> retrievedCustomers = new ArrayList<>();

            while (rs.next()) {
                Customer customer = fillCustomerFromResultSet(rs);
                retrievedCustomers.add(customer);
            }
            return retrievedCustomers;

        } catch (SQLException ex) {
            throw new DBException("Error when retrieving customer with following name: " + name, ex);
        }
    }

    @Override
    public List<Customer> findAll() throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer")) {

            ResultSet rs = st.executeQuery();

            List<Customer> retrievedCustomers = new ArrayList<>();

            while (rs.next()) {
                retrievedCustomers.add(fillCustomerFromResultSet(rs));
            }
            return retrievedCustomers;

        } catch (SQLException ex) {
            throw new DBException("Error when retrieving list of all customers", ex);
        }
    }

    private void validate(Customer customer) throws IllegalArgumentException {
        if(customer == null) {
            throw new IllegalArgumentException("Cannot create / update customer from null object");
        }
        if(customer.getFullName() == null) {
            throw new IllegalArgumentException("Customer's name is missing");
        }
    }

    private Long getIdFromResultSetKeys(ResultSet keyRS, Customer customer) throws DBException, SQLException {
        if (keyRS.next()) {

            if (keyRS.getMetaData().getColumnCount() != 1) {
                throw new DBException("Internal Error: Generated key retrieving failed when trying to insert " +
                        "following customer: " + customer + " - wrong key fields count: " +
                        keyRS.getMetaData().getColumnCount());
            }

            Long result = keyRS.getLong(1);
            if (keyRS.next()) {
                throw new DBException("Internal Error: Generated key retrieving failed when trying to insert " +
                        "following customer: " + customer + " - more keys found");
            }
            return result;
        } else {
            throw new DBException("Internal Error: Generated key retrieving failed when trying to insert following " +
                    "customer: " + customer + " - no key found");
        }
    }

    private Customer fillCustomerFromResultSet (ResultSet rs) throws SQLException {
        Customer customer = new Customer();

        customer.setId(rs.getLong("id"));
        customer.setFullName(rs.getString("full_name"));
        customer.setPhoneNumber(rs.getString("phone"));
        if(rs.getDate("birth_date") != null) {
            customer.setBirthDate(rs.getDate("birth_date").toLocalDate());
        }
        customer.setAddress(rs.getString("address"));

        return customer;
    }
}
