package cz.muni.fi.car.leasing;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.sql.DataSource;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Jan Budinsky
 */

public class CustomerManagerImpl implements CustomerManager {

    final static Logger log = LoggerFactory.getLogger(CustomerManagerImpl.class);

    private final DataSource dataSource;

    public CustomerManagerImpl(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Override
    public void create(Customer customer) throws DBException, IllegalArgumentException {
        validate(customer);
        if (customer.getId() != null) {
            log.error("Error while creating customer - id has to be generated by DB, got id {}", customer.getId());
            throw new IllegalArgumentException("Customer ID is set while it should have been generated by DB");
        }
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "INSERT INTO customer (full_name,phone,birth_date,address) VALUES (?,?,?,?)",
                     Statement.RETURN_GENERATED_KEYS)) {

            st.setString(1, customer.getFullName());
            st.setString(2, customer.getPhoneNumber());
            st.setDate(3, Date.valueOf(customer.getBirthDate()));
            st.setString(4, customer.getAddress());

            int addedRows = st.executeUpdate();

            if (addedRows != 1) {
                log.error("Error while creating Customer {}", customer);
                throw new DBException("Internal Error: More rows (" + addedRows +
                        ") inserted when trying to insert following customer: " + customer);
            }

            ResultSet keyRS = st.getGeneratedKeys();
            customer.setId(getIdFromResultSetKeys(keyRS, customer));
            log.info("Created customer with id {}", customer.getId());

        } catch (SQLException ex) {
            log.error("Error while creating Customer {}", customer, ex);
            throw new DBException("Error when inserting following customer: " + customer, ex);
        }

    }

    @Override
    public void delete(Long id) throws DBException, IllegalArgumentException {
        if (id == null) {
            log.error("Error while deleting customer - null id given");
            throw new IllegalArgumentException("Cannot delete customer with null ID given");
        }
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "DELETE FROM customer WHERE id = ?",
                     Statement.RETURN_GENERATED_KEYS)) {

            st.setLong(1, id);

            int deletedRows = st.executeUpdate();

            if (deletedRows == 0) {
                log.error("Error while deleting customer with id {} - not found", id);
                throw new EntityNotFoundException("Failed to find / delete customer with ID: " + id);
            }
            if (deletedRows != 1) {
                log.error("Error while deleting customer with id {} - more rows affected", id);
                throw new DBException("Multiple rows were affected while only 1 should have been deleted with ID: " +
                        id);
            }
            log.info("Deleted customer with id {}", id);
        } catch (SQLException ex) {
            log.error("Error while deleting customer with id {}", id, ex);
            throw new DBException("Error when deleting customer with following ID: " + id, ex);
        }
    }

    @Override
    public void update(Customer customer) throws DBException, IllegalArgumentException {
        validate(customer);
        if (customer.getId() == null) {
            log.error("Error while updating customer - null id given");
            throw new IllegalArgumentException("Cannot update object with null ID");
        }
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement("UPDATE customer SET full_name = ?, phone = ?, " +
                     "birth_date = ?, address = ? WHERE id = ?")) {

            st.setString(1, customer.getFullName());
            st.setString(2, customer.getPhoneNumber());
            st.setDate(3, Date.valueOf(customer.getBirthDate()));
            st.setString(4, customer.getAddress());
            st.setLong(5, customer.getId());

            int updatedRows = st.executeUpdate();

            if (updatedRows == 0) {
                log.error("Error while updating customer with id {} - not found", customer.getId());
                throw new EntityNotFoundException("Customer with ID " + customer.getId() + "was not found in database");
            } else if (updatedRows != 1) {
                log.error("Error while updating customer with id {} - more rows affected", customer.getId());
                throw new DBException("More than 1 row updated: " + updatedRows);
            }
            log.info("Updated customer with id {}", customer.getId());
        } catch (SQLException ex) {
            log.error("Error while updating customer with id {}", customer.getId(), ex);
            throw new DBException("Error when updating following customer: " + customer.getId(), ex);
        }
    }

    @Override
    public Customer findById(Long id) throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer WHERE id = ?")) {

            st.setLong(1, id);

            ResultSet rs = st.executeQuery();

            if (!rs.next()) {
                log.warn("No customer with id {} found in database", id);
                return null;
            }
            Customer customer = fillCustomerFromResultSet(rs);

            if (rs.next()) {
                log.error("Error in database - multiple customers with id {}", id);
                throw new DBException("Internal error: More customers with the same id (" + id + ") found." +
                        "First 2 customers: 1:\n" + customer + "2:\n" + fillCustomerFromResultSet(rs));
            }

            log.info("Retrieved customer with id {}", id);
            return customer;

        } catch (SQLException ex) {
            log.error("Error while retrieving customer with id {}", id, ex);
            throw new DBException("Error when retrieving customer with following id: " + id, ex);
        }
    }

    @Override
    public List<Customer> findByName(String name) throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer WHERE full_name = ?")) {

            st.setString(1, name);

            List<Customer> customers = executeFindQuery(st);
            log.info("Retrieved customers with name {}", name);
            return customers;

        } catch (SQLException ex) {
            log.error("Error when retrieving customers with name {}", name, ex);
            throw new DBException("Error when retrieving customers with following name: " + name, ex);
        }
    }

    @Override
    public List<Customer> findByPhoneNumber(String phoneNumber) throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer WHERE phone = ?")) {

            st.setString(1, phoneNumber);

            List<Customer> customers = executeFindQuery(st);
            log.info("Retrieved customers with phone number {}", phoneNumber);
            return customers;

        } catch (SQLException ex) {
            log.error("Error when retrieving customers with phone number {}", phoneNumber, ex);
            throw new DBException("Error when retrieving customers with following phone number: " + phoneNumber, ex);
        }
    }

    @Override
    public List<Customer> findByBirthDate(LocalDate birthDate) throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer WHERE birth_date = ?")) {

            st.setDate(1, Date.valueOf(birthDate));

            List<Customer> customers = executeFindQuery(st);
            log.info("Retrieved customers with birth date {}", birthDate);
            return customers;

        } catch (SQLException ex) {
            log.error("Error when retrieving customers with birth date {}", birthDate, ex);
            throw new DBException("Error when retrieving customers with following birth date: " + birthDate, ex);
        }
    }

    @Override
    public List<Customer> findByAddress(String address) throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer WHERE address = ?")) {

            st.setString(1, address);

            List<Customer> customers = executeFindQuery(st);
            log.info("Retrieved customers with address {}", address);
            return customers;

        } catch (SQLException ex) {
            log.error("Error when retrieving customers with address {}", address, ex);
            throw new DBException("Error when retrieving customers with following address: " + address, ex);
        }
    }

    @Override
    public List<Customer> findAll() throws DBException {
        try (Connection connection = dataSource.getConnection();
             PreparedStatement st = connection.prepareStatement(
                     "SELECT id, full_name, phone, birth_date, address FROM customer")) {

            ResultSet rs = st.executeQuery();

            List<Customer> retrievedCustomers = new ArrayList<>();

            while (rs.next()) {
                retrievedCustomers.add(fillCustomerFromResultSet(rs));
            }
            log.info("Retrieved all customers");
            return retrievedCustomers;

        } catch (SQLException ex) {
            log.error("Error when retrieving all customers", ex);
            throw new DBException("Error when retrieving list of all customers", ex);
        }
    }

    private List<Customer> executeFindQuery(PreparedStatement st) throws SQLException {
        ResultSet rs = st.executeQuery();

        List<Customer> retrievedCustomers = new ArrayList<>();

        while (rs.next()) {
            Customer customer = fillCustomerFromResultSet(rs);
            retrievedCustomers.add(customer);
        }
        return retrievedCustomers;
    }

    private void validate(Customer customer) throws IllegalArgumentException {
        if (customer == null) {
            throw new IllegalArgumentException("Cannot create / update customer from null object");
        }
        if (customer.getFullName() == null) {
            throw new IllegalArgumentException("Customer's name is missing");
        }
    }

    private Long getIdFromResultSetKeys(ResultSet keyRS, Customer customer) throws DBException, SQLException {
        if (keyRS.next()) {

            if (keyRS.getMetaData().getColumnCount() != 1) {
                throw new DBException("Internal Error: Generated key retrieving failed when trying to insert " +
                        "following customer: " + customer + " - wrong key fields count: " +
                        keyRS.getMetaData().getColumnCount());
            }

            Long result = keyRS.getLong(1);
            if (keyRS.next()) {
                throw new DBException("Internal Error: Generated key retrieving failed when trying to insert " +
                        "following customer: " + customer + " - more keys found");
            }
            return result;
        } else {
            throw new DBException("Internal Error: Generated key retrieving failed when trying to insert following " +
                    "customer: " + customer + " - no key found");
        }
    }

    private Customer fillCustomerFromResultSet(ResultSet rs) throws SQLException {
        Customer customer = new Customer();

        customer.setId(rs.getLong("id"));
        customer.setFullName(rs.getString("full_name"));
        customer.setPhoneNumber(rs.getString("phone"));
        if (rs.getDate("birth_date") != null) {
            customer.setBirthDate(rs.getDate("birth_date").toLocalDate());
        }
        customer.setAddress(rs.getString("address"));

        return customer;
    }
}
